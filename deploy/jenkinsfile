pipeline {
    agent any
        environment {
        K8S_SERVER = "http://192.168.58.2:32090"
        K8S_TOKEN = credentials('k8s-token')
        NAMESPACE="default"
        // KUBE_CONFIG = credentials('kubeconfig') // Configura una credencial en Jenkins con el Kubeconfig de tu VPS
    }
    stages {
        stage('Clonar repositorio git Autocaravaneando desde Github') {
            steps {
                git branch: 'master', url: 'https://github.com/Txus27/Pokeapi.git'
            }
        }  
        //Acciones
        stage('Acciones'){
            steps{
                script{
                    sh """
                        echo $K8S_SERVER
                        echo $K8S_TOKEN
                    """
                }
            }   
        }
        //acceso en Kubernetes
        stage('Configurar acceso a Kubernetes') {
            steps {
                script {
                    sh """
                    kubectl config set-cluster k8s-cluster --server=$K8S_SERVER --insecure-skip-tls-verify=true
                    kubectl config set-credentials jenkins --token=$K8S_TOKEN
                    kubectl config set-context jenkins --cluster=k8s-cluster --user=jenkins --namespace=$NAMESPACE
                    kubectl config use-context jenkins
                    """
                }
            }
        }
        //Verificar en Kubernetes
                 stage('Verificar kubectl 1') {
            steps {
                sh 'kubectl version --client'
                // sh 'kubectl config current-context' // Verifica que está usando el contexto correcto
                sh 'kubectl get nodes' // Confirma conexión con el clúster
            }
        }
        //Despliegue
      /*
        stage('Deploy en Kubernetes') {
            steps {
                script {
                        sh "kubectl apply -f deploy/kubernetes/namespace.yaml"
                        sh "kubectl apply -f deploy/kubernetes/configMap.yaml"
                        sh "kubectl apply -f deploy/kubernetes/pvc.yaml"
                        sh "kubectl apply -f deploy/kubernetes/deploy.yaml"
                        sh "kubectl apply -f deploy/kubernetes/serviceNP.yaml"
                    }
                }
            }
        }
      */
        //Post
        post {
            success {
                echo "Despliegue completado con éxito"
            }
            failure {
                echo "Error en el despliegue"
            }
        }
    }


}
// prueba 3